/*
 * Nombre: RONALD BAJAÑA, ANDRES ROBLES
 * Materia: Sistemas Embebido
 * Proyecto: final
 */
 
// Librería para la comunicación I2C
#include <Wire.h>


// Pines de los leds
#define LedVerde1 2
#define LedAmarillo1 3
#define LedRojo1 4
#define LedVerde2 8
#define LedAmarillo2 10
#define LedRojo2 7


//Pines para el ultrasonido(sensor de proximidad)
int Trigger = 13;
int Trigger1 = 12;
int Echo = 6;
int Echo1 = 5;

// Variables para los semaforos
int estadoP = 0; 
int estadoS = 0;
//int bandera = 1;
// Constantes
const float sonido = 34300.0; // Velocidad del sonido en cm/s
const float umbral1 = 8.0;
const float umbral2 = 1.0;  //distancia justo abajo del semaforo

//variable de tiempo
unsigned long tiempo1 = 0;
unsigned long tiempo2 = 0;

void setup () {
 
	Serial.begin(9600);

	// Modo salida de los pines
	pinMode(LedVerde1, OUTPUT);
	pinMode(LedAmarillo1, OUTPUT);
	pinMode(LedRojo1, OUTPUT);
	pinMode(LedVerde2, OUTPUT);
	pinMode(LedAmarillo2, OUTPUT);
	pinMode(LedRojo2, OUTPUT);

	pinMode(Echo, INPUT);
	pinMode(Trigger, OUTPUT);
	pinMode(Echo1, INPUT);
	pinMode(Trigger1, OUTPUT);

	tiempo1 = millis();
} 

void loop () {
	//iniciamos trigger
	iniciarTrigger(Trigger);
	float distanciaP = calcularDistancia(Echo);
	delay(50);

	iniciarTrigger(Trigger1);
	float distanciaS = calcularDistancia(Echo1);
	delay(50);
	
	//lLOGICA
	if(distanciaP < umbral1 && distanciaS > umbral1){
		ONSemaforoPrincipal();
		digitalWrite(LedRojo1, LOW);
		//valor la distancia P con umral 2
	}
	else if (distanciaS < umbral1 && distanciaP > umbral1){
		ONSemaforoSecundario();
		digitalWrite(LedRojo2, LOW);
		estadoS = 1;
		//valor la distancia S con umral 2
	}
	else if (distanciaS<umbral1 && distanciaP < umbral1){
		if (estadoS ==1){
			digitalWrite(LedVerde2, LOW);
		}
		
		//Variacion del semanforo
		tiempo2 = millis();
		if(tiempo2 < (tiempo1+5000)){  //Si ha pasado 3 segundo 
			digitalWrite(LedRojo1, LOW);
			digitalWrite(LedVerde1, HIGH);	
			digitalWrite(LedRojo2, HIGH);

			if (distanciaS<umbral2 ){
				//Serial.println("alarma se paso al roja en semaforo secuandario");
				Serial.println("2");
				//bandera=2;
			}
		}
		else if((tiempo2>(tiempo1+5000))&&(tiempo2<(tiempo1+6000))){
			//tiempo1 = millis(); //Actualiza el tiempo actual
			digitalWrite(LedVerde1, LOW);
			digitalWrite(LedAmarillo1, HIGH);		 
		}
		else if((tiempo2>(tiempo1+6000))&&(tiempo2<(tiempo1+11000))){
			digitalWrite(LedAmarillo1, LOW);
			digitalWrite(LedRojo1, HIGH);
			digitalWrite(LedRojo2, LOW);
			digitalWrite(LedVerde2, HIGH);

			if (distanciaP<umbral2){
				//Serial.println("alarma se paso al roja en semaforo principal");
				Serial.println("1");
			}
		}
		else if((tiempo2>(tiempo1+11000))&&(tiempo2<(tiempo1+12000))){
			digitalWrite(LedVerde2, LOW);
			digitalWrite(LedAmarillo2, HIGH);
		}
		else if(tiempo2>(tiempo1+12000)){
			digitalWrite(LedRojo1, LOW);
			digitalWrite(LedAmarillo2, LOW);
			digitalWrite(LedRojo2, HIGH);
			digitalWrite(LedVerde1, HIGH);
			tiempo1 = millis();
		}
	}
	if (distanciaS>umbral1 && distanciaP > umbral1){
		OFFSemeforos();
		digitalWrite(LedRojo1, HIGH);
		digitalWrite(LedRojo2, HIGH);		
	}
}
 
void ONSemaforoPrincipal() {
	//Pasamos a verde
	digitalWrite(LedVerde1, HIGH);
	digitalWrite(LedRojo2, HIGH);
}

void ONSemaforoSecundario() {
	//Pasamos a verde
	digitalWrite(LedVerde2, HIGH);
	digitalWrite(LedRojo1, HIGH);
}

void OFFSemeforos() {
	digitalWrite(LedVerde1, LOW);
	digitalWrite(LedAmarillo1, LOW);
	digitalWrite(LedRojo1, LOW);
	digitalWrite(LedVerde2, LOW);
	digitalWrite(LedAmarillo2, LOW);
	digitalWrite(LedRojo2, LOW);
}

 // Método que inicia la secuencia del Trigger para comenzar a medir
void iniciarTrigger(int pin) {
	// Ponemos el pin Trigger a estado alto y esperamos 10 ms
	digitalWrite(pin, HIGH);
	delayMicroseconds(10);
	// Comenzamos poniendo el pin Trigger en estado bajo
	digitalWrite(pin, LOW);
	
}

// Método que calcula la distancia a la que se encuentra un objeto.
float calcularDistancia(int pin) {
  // La función pulseIn obtiene el tiempo que tarda en cambiar entre estados, en este caso a HIGH
  unsigned long tiempo = pulseIn(pin, HIGH);
 
  // Obtenemos la distancia en cm, hay que convertir el tiempo en segudos ya que está en microsegundos
  // por eso se multiplica por 0.000001
  float distancia = (float) (tiempo * 0.000001 * sonido / 2.0)/100;
  //Serial.print(distancia);
  //Serial.print("m");
  //Serial.println();
  delay(200);
 
  return distancia;
}


